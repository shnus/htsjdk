JAVA PROFILE 1.0.1, created Thu Jul 21 18:06:01 2016

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=50000182, id = 200002, name="HPROF gc_finish watcher", group="system")
THREAD START (obj=50000182, id = 200001, name="main", group="main")
THREAD END (id = 200001)
THREAD START (obj=50000182, id = 200003, name="DestroyJavaVM", group="main")
THREAD END (id = 200003)
TRACE 302066:
	java.lang.ClassLoader.findBootstrapClassOrNull(<Unknown Source>:Unknown line)
	java.lang.ClassLoader.loadClass(<Unknown Source>:Unknown line)
	java.lang.ClassLoader.loadClass(<Unknown Source>:Unknown line)
	sun.misc.Launcher$AppClassLoader.loadClass(<Unknown Source>:Unknown line)
TRACE 304028:
	java.io.FileOutputStream.write(<Unknown Source>:Unknown line)
	java.io.BufferedOutputStream.write(<Unknown Source>:Unknown line)
	java.io.PrintStream.write(<Unknown Source>:Unknown line)
	sun.nio.cs.StreamEncoder.writeBytes(<Unknown Source>:Unknown line)
TRACE 302591:
	sun.launcher.LauncherHelper.getLocalizedMessage(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.initHelpMessage(<Unknown Source>:Unknown line)
TRACE 302583:
	java.text.MessageFormat.subformat(<Unknown Source>:Unknown line)
	java.text.MessageFormat.format(<Unknown Source>:Unknown line)
	java.text.Format.format(<Unknown Source>:Unknown line)
	java.text.MessageFormat.format(<Unknown Source>:Unknown line)
TRACE 302741:
	java.util.Arrays.copyOfRange(<Unknown Source>:Unknown line)
	java.lang.String.<init>(<Unknown Source>:Unknown line)
	java.lang.String.substring(<Unknown Source>:Unknown line)
	java.util.StringTokenizer.nextToken(<Unknown Source>:Unknown line)
TRACE 300364:
	java.lang.ProcessEnvironment$NameComparator.compare(<Unknown Source>:Unknown line)
	java.util.TreeMap.put(<Unknown Source>:Unknown line)
	java.util.AbstractMap.putAll(<Unknown Source>:Unknown line)
	java.util.TreeMap.putAll(<Unknown Source>:Unknown line)
TRACE 302047:
	java.lang.ClassLoader.getClassLoadingLock(<Unknown Source>:Unknown line)
	java.lang.ClassLoader.loadClass(<Unknown Source>:Unknown line)
	sun.misc.Launcher$AppClassLoader.loadClass(<Unknown Source>:Unknown line)
	java.lang.ClassLoader.loadClass(<Unknown Source>:Unknown line)
TRACE 302526:
	java.lang.AbstractStringBuilder.ensureCapacityInternal(<Unknown Source>:Unknown line)
	java.lang.AbstractStringBuilder.append(<Unknown Source>:Unknown line)
	java.lang.StringBuilder.append(<Unknown Source>:Unknown line)
	java.text.MessageFormat.applyPattern(<Unknown Source>:Unknown line)
TRACE 302524:
	java.lang.String.length(<Unknown Source>:Unknown line)
	java.text.MessageFormat.applyPattern(<Unknown Source>:Unknown line)
	java.text.MessageFormat.<init>(<Unknown Source>:Unknown line)
	java.text.MessageFormat.format(<Unknown Source>:Unknown line)
TRACE 302092:
	java.util.ResourceBundle$Control.newBundle(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.loadBundle(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.findBundle(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.findBundle(<Unknown Source>:Unknown line)
TRACE 301357:
	java.net.URLStreamHandler.toExternalForm(<Unknown Source>:Unknown line)
	java.net.URL.toExternalForm(<Unknown Source>:Unknown line)
	java.net.URL.toString(<Unknown Source>:Unknown line)
	java.lang.String.valueOf(<Unknown Source>:Unknown line)
TRACE 300149:
	java.util.HashMap.get(<Unknown Source>:Unknown line)
	sun.reflect.Reflection.filterFields(<Unknown Source>:Unknown line)
	java.lang.Class.privateGetDeclaredFields(<Unknown Source>:Unknown line)
	java.lang.Class.getDeclaredField(<Unknown Source>:Unknown line)
TRACE 301441:
	java.lang.ref.Reference.get(<Unknown Source>:Unknown line)
	java.lang.ThreadLocal$ThreadLocalMap.cleanSomeSlots(<Unknown Source>:Unknown line)
	java.lang.ThreadLocal$ThreadLocalMap.set(<Unknown Source>:Unknown line)
	java.lang.ThreadLocal$ThreadLocalMap.access$100(<Unknown Source>:Unknown line)
TRACE 301482:
	java.lang.StringBuilder.append(<Unknown Source>:Unknown line)
	sun.net.www.ParseUtil.decode(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath$JarLoader.<init>(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath$3.run(<Unknown Source>:Unknown line)
TRACE 303873:
	java.text.FieldPosition.getFieldDelegate(<Unknown Source>:Unknown line)
	java.text.DecimalFormat.format(<Unknown Source>:Unknown line)
	java.text.DecimalFormat.format(<Unknown Source>:Unknown line)
	java.text.Format.format(<Unknown Source>:Unknown line)
TRACE 303424:
	java.io.DataInputStream.readInt(<Unknown Source>:Unknown line)
	java.util.Currency.readIntArray(<Unknown Source>:Unknown line)
	java.util.Currency.access$000(<Unknown Source>:Unknown line)
	java.util.Currency$1.run(<Unknown Source>:Unknown line)
TRACE 301013:
	sun.nio.cs.SingleByte$Decoder.decodeArrayLoop(<Unknown Source>:Unknown line)
	sun.nio.cs.SingleByte$Decoder.decodeLoop(<Unknown Source>:Unknown line)
	java.nio.charset.CharsetDecoder.decode(<Unknown Source>:Unknown line)
	sun.nio.cs.StreamDecoder.implRead(<Unknown Source>:Unknown line)
TRACE 300437:
	java.io.WinNTFileSystem.normalize(<Unknown Source>:Unknown line)
	java.io.File.<init>(<Unknown Source>:Unknown line)
	sun.usagetracker.UsageTrackerClient.registerUsage(<Unknown Source>:Unknown line)
	sun.usagetracker.UsageTrackerClient.setupAndTimestamp(<Unknown Source>:Unknown line)
TRACE 301563:
	java.io.WinNTFileSystem.normalize(<Unknown Source>:Unknown line)
	java.io.WinNTFileSystem.normalize(<Unknown Source>:Unknown line)
	java.io.File.<init>(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath$JarLoader.<init>(<Unknown Source>:Unknown line)
TRACE 304002:
	sun.nio.cs.SingleByte$Encoder.encode(<Unknown Source>:Unknown line)
	sun.nio.cs.SingleByte$Encoder.encodeArrayLoop(<Unknown Source>:Unknown line)
	sun.nio.cs.SingleByte$Encoder.encodeLoop(<Unknown Source>:Unknown line)
	java.nio.charset.CharsetEncoder.encode(<Unknown Source>:Unknown line)
TRACE 304008:
	sun.nio.cs.SingleByte$Encoder.encodeArrayLoop(<Unknown Source>:Unknown line)
	sun.nio.cs.SingleByte$Encoder.encodeLoop(<Unknown Source>:Unknown line)
	java.nio.charset.CharsetEncoder.encode(<Unknown Source>:Unknown line)
	sun.nio.cs.StreamEncoder.implWrite(<Unknown Source>:Unknown line)
TRACE 302767:
	java.io.WinNTFileSystem.normalize(<Unknown Source>:Unknown line)
	java.io.File.<init>(<Unknown Source>:Unknown line)
	sun.util.locale.provider.JRELocaleProviderAdapter.isNonENLangSupported(<Unknown Source>:Unknown line)
	sun.util.locale.provider.JRELocaleProviderAdapter.createLanguageTagSet(<Unknown Source>:Unknown line)
TRACE 302693:
	java.lang.Class.getSimpleName(<Unknown Source>:Unknown line)
	sun.util.locale.provider.JRELocaleProviderAdapter.getLocaleServiceProvider(<Unknown Source>:Unknown line)
	sun.util.locale.provider.LocaleProviderAdapter.findAdapter(<Unknown Source>:Unknown line)
	sun.util.locale.provider.LocaleProviderAdapter.getAdapter(<Unknown Source>:Unknown line)
TRACE 302648:
	sun.util.locale.provider.LocaleProviderAdapter.<clinit>(<Unknown Source>:Unknown line)
	java.text.NumberFormat.getInstance(<Unknown Source>:Unknown line)
	java.text.NumberFormat.getInstance(<Unknown Source>:Unknown line)
	java.text.MessageFormat.subformat(<Unknown Source>:Unknown line)
TRACE 302632:
	java.lang.ref.Finalizer.<init>(<Unknown Source>:Unknown line)
	java.lang.ref.Finalizer.register(<Unknown Source>:Unknown line)
	java.lang.Enum.<init>(<Unknown Source>:Unknown line)
	sun.util.locale.provider.LocaleProviderAdapter$Type.<init>(<Unknown Source>:Unknown line)
TRACE 302596:
	java.lang.StringBuilder.append(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.initHelpMessage(<Unknown Source>:Unknown line)
TRACE 302748:
	java.util.HashMap.putVal(<Unknown Source>:Unknown line)
	java.util.HashMap.put(<Unknown Source>:Unknown line)
	java.util.HashSet.add(<Unknown Source>:Unknown line)
	sun.util.locale.provider.JRELocaleProviderAdapter.createLanguageTagSet(<Unknown Source>:Unknown line)
TRACE 301091:
	sun.misc.MetaIndex.registerDirectory(<Unknown Source>:Unknown line)
	sun.misc.Launcher$BootClassPathHolder$1.run(<Unknown Source>:Unknown line)
	sun.misc.Launcher$BootClassPathHolder$1.run(<Unknown Source>:Unknown line)
	sun.misc.Launcher$BootClassPathHolder.<clinit>(<Unknown Source>:Unknown line)
TRACE 301072:
	java.util.HashMap.putVal(<Unknown Source>:Unknown line)
	java.util.HashMap.put(<Unknown Source>:Unknown line)
	sun.misc.MetaIndex.registerDirectory(<Unknown Source>:Unknown line)
	sun.misc.Launcher$BootClassPathHolder$1.run(<Unknown Source>:Unknown line)
TRACE 301064:
	java.util.Arrays.copyOf(<Unknown Source>:Unknown line)
	java.util.ArrayList.toArray(<Unknown Source>:Unknown line)
	sun.misc.MetaIndex.<init>(<Unknown Source>:Unknown line)
	sun.misc.MetaIndex.registerDirectory(<Unknown Source>:Unknown line)
TRACE 301060:
	java.util.ArrayList.add(<Unknown Source>:Unknown line)
	sun.misc.MetaIndex.registerDirectory(<Unknown Source>:Unknown line)
	sun.misc.Launcher$BootClassPathHolder$1.run(<Unknown Source>:Unknown line)
	sun.misc.Launcher$BootClassPathHolder$1.run(<Unknown Source>:Unknown line)
TRACE 301039:
	sun.nio.cs.StreamDecoder.implRead(<Unknown Source>:Unknown line)
	sun.nio.cs.StreamDecoder.read(<Unknown Source>:Unknown line)
	java.io.InputStreamReader.read(<Unknown Source>:Unknown line)
	java.io.BufferedReader.fill(<Unknown Source>:Unknown line)
TRACE 301037:
	sun.nio.cs.SingleByte$Decoder.decode(<Unknown Source>:Unknown line)
	sun.nio.cs.SingleByte$Decoder.decodeArrayLoop(<Unknown Source>:Unknown line)
	sun.nio.cs.SingleByte$Decoder.decodeLoop(<Unknown Source>:Unknown line)
	java.nio.charset.CharsetDecoder.decode(<Unknown Source>:Unknown line)
TRACE 300883:
	java.lang.String.toLowerCase(<Unknown Source>:Unknown line)
	java.io.WinNTFileSystem.hashCode(<Unknown Source>:Unknown line)
	java.io.File.hashCode(<Unknown Source>:Unknown line)
	java.util.HashMap.hash(<Unknown Source>:Unknown line)
CPU TIME (ms) BEGIN (total = 433) Thu Jul 21 18:06:02 2016
rank   self  accum   count trace method
   1 15.70% 15.70%       8 302066 java.lang.ClassLoader.findBootstrapClassOrNull
   2 14.55% 30.25%       1 304028 java.io.FileOutputStream.write
   3  7.16% 37.41%       3 302591 sun.launcher.LauncherHelper.getLocalizedMessage
   4  3.93% 41.34%       6 302583 java.text.MessageFormat.subformat
   5  3.70% 45.03%     258 302741 java.util.Arrays.copyOfRange
   6  3.70% 48.73%     250 300364 java.lang.ProcessEnvironment$NameComparator.compare
   7  3.70% 52.42%       8 302047 java.lang.ClassLoader.getClassLoadingLock
   8  3.70% 56.12%    2388 302526 java.lang.AbstractStringBuilder.ensureCapacityInternal
   9  3.70% 59.82%    2414 302524 java.lang.String.length
  10  3.70% 63.51%       6 302092 java.util.ResourceBundle$Control.newBundle
  11  3.70% 67.21%      20 301357 java.net.URLStreamHandler.toExternalForm
  12  3.70% 70.90%       3 300149 java.util.HashMap.get
  13  3.70% 74.60%       1 301441 java.lang.ref.Reference.get
  14  3.70% 78.29%    1027 301482 java.lang.StringBuilder.append
  15  3.46% 81.76%       4 303873 java.text.FieldPosition.getFieldDelegate
  16  3.46% 85.22%     888 303424 java.io.DataInputStream.readInt
  17  3.46% 88.68%       3 301013 sun.nio.cs.SingleByte$Decoder.decodeArrayLoop
  18  3.46% 92.15%       1 300437 java.io.WinNTFileSystem.normalize
  19  3.46% 95.61%      20 301563 java.io.WinNTFileSystem.normalize
  20  0.69% 96.30%    2419 304002 sun.nio.cs.SingleByte$Encoder.encode
  21  0.69% 97.00%       2 304008 sun.nio.cs.SingleByte$Encoder.encodeArrayLoop
  22  0.23% 97.23%       1 302767 java.io.WinNTFileSystem.normalize
  23  0.23% 97.46%       2 302693 java.lang.Class.getSimpleName
  24  0.23% 97.69%       1 302648 sun.util.locale.provider.LocaleProviderAdapter.<clinit>
  25  0.23% 97.92%       5 302632 java.lang.ref.Finalizer.<init>
  26  0.23% 98.15%       3 302596 java.lang.StringBuilder.append
  27  0.23% 98.38%     256 302748 java.util.HashMap.putVal
  28  0.23% 98.61%       2 301091 sun.misc.MetaIndex.registerDirectory
  29  0.23% 98.85%       6 301072 java.util.HashMap.putVal
  30  0.23% 99.08%       6 301064 java.util.Arrays.copyOf
  31  0.23% 99.31%      81 301060 java.util.ArrayList.add
  32  0.23% 99.54%       2 301039 sun.nio.cs.StreamDecoder.implRead
  33  0.23% 99.77%    2126 301037 sun.nio.cs.SingleByte$Decoder.decode
  34  0.23% 100.00%      34 300883 java.lang.String.toLowerCase
CPU TIME (ms) END
